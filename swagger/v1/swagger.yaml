---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/motors":
    get:
      summary: Lists all motors
      tags:
      - Motors
      responses:
        '200':
          description: List of motors - Successful
    post:
      summary: Creates a motor
      tags:
      - Motors
      parameters: []
      responses:
        '201':
          description: Motor created - Successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                brand_name:
                  type: string
                model_no:
                  type: integer
                manufacturer:
                  type: string
                manufacture_date:
                  type: string
                  format: date
                description:
                  type: string
                photo:
                  type: string
                unit_price:
                  type: number
                purchase_fee:
                  type: number
                finance_fee:
                  type: number
                total_price:
                  type: number
                user_id:
                  type: integer
                location_id:
                  type: integer
              required:
              - brand_name
              - model_no
              - manufacturer
              - manufacture_date
              - description
              - photo
              - unit_price
              - purchase_fee
              - finance_fee
              - total_price
              - user_id
              - location_id
  "/api/motors/{id}":
    parameters:
    - name: id
      in: path
      description: Motor ID
      required: true
      schema:
        type: integer
    delete:
      summary: Deletes a motor
      tags:
      - Motors
      responses:
        '204':
          description: Motor deleted - Successful
        '404':
          description: Motor not found
  "/api/users/{user_id}/reservations":
    get:
      summary: Lists reservations
      tags:
      - Reservations
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: list of reservations
    post:
      summary: Creates a reservation
      tags:
      - Reservations
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '201':
          description: reservation created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                motor_id:
                  type: integer
                reserve_date:
                  type: string
                  format: date
                city_name:
                  type: string
              required:
              - motor_id
              - reserve_date
              - city_name
  "/api/stores_location":
    post:
      summary: Creates a store location
      tags:
      - Store Locations
      parameters: []
      responses:
        '201':
          description: store location created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                city_name:
                  type: string
              required:
              - city_name
    get:
      summary: Lists store locations
      tags:
      - Store Locations
      responses:
        '200':
          description: list of store locations
  "/users":
    post:
      summary: Registers a user
      parameters: []
      responses:
        '200':
          description: user registered
        '422':
          description: invalid user registration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                password_confirmation:
                  type: string
              required:
              - name
              - email
              - password
              - password_confirmation
  "/users/sign_in":
    post:
      summary: Logs in a user and returns a JWT token
      tags:
      - User Sessions
      parameters: []
      responses:
        '200':
          description: User signed in successfully
        '401':
          description: Invalid email or password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: motorhubbackend-production.up.railway.app
